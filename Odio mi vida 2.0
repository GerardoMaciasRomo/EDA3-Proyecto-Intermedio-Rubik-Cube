import numpy as np
from queue import PriorityQueue
import random


class RubikCube:
    """Esta clase solo nos sirve para crear un prototipo de cubo lleno
    y de tamaño standard"""

    def create_cube(self):
        """Regresa un cubo con caras armadas"""

        cube = np.zeros((54))
        cube[9:18] = 1
        cube[18:27] = 2
        cube[27:36] = 3
        cube[36:45] = 4
        cube[45:54] = 5
        cube = np.reshape(cube, (6, 3, 3))

        return cube

    def create_cube_with_given_list(self, lista):
        """Esta función debería transformar un arreglo lineal dado en un cubo
        y regresar ese cubo"""
        cube = np.reshape(lista, (6, 3, 3))
        return cube

    def create_list_with_given_cube(self, cube):
        """Esta función convierte el cubo  a una lista plana y regresar esa lista"""
        lista = np.reshape(cube, (54))
        return lista


class Movements:
    """Dentro de esta clase Movements(), se encuentran los códigos de los doce
    movimientos principales  del puzzle de Rubik 3x3, me en cuentro aún revisando
    el correcto funcionamiento de cada una de las implementaciones"""

    def _init_(self, cube):
        """El único parámetro necesario para esta clase es un cubo que debe ser dado"""
        self.cube = cube

    def u(self):
        """Implementación del movimiento U en el cubo"""
        # Rotar Top sobre su propio eje a la Izquierda
        sub_top = self.cube[4]
        rotated_top = np.rot90(sub_top, k=-1)
        self.cube[4] = rotated_top
        # Rotar a la izquierda las primeras filas de las primras cuatro caras
        cero = self.cube[0, 0].copy()
        one = self.cube[1, 0].copy()
        two = self.cube[2, 0].copy()
        three = self.cube[3, 0].copy()
        self.cube[3, 0] = cero
        self.cube[2, 0] = three
        self.cube[1, 0] = two
        self.cube[0, 0] = one

    def u_prima(self):
        """Implementación del movimiento U' en el cubo"""
        # Rotar Top sobre su propio eje a la derecha
        sub_top = self.cube[4]
        rotated_top = np.rot90(sub_top, k=1)
        self.cube[4] = rotated_top
        # Rotar a la derecha las primeras filas de las primeras cuatro caras
        cero = self.cube[0, 0].copy()
        one = self.cube[1, 0].copy()
        two = self.cube[2, 0].copy()
        three = self.cube[3, 0].copy()
        self.cube[1, 0] = cero
        self.cube[2, 0] = one
        self.cube[3, 0] = two
        self.cube[0, 0] = three

    def d(self):
        """Implementación del movimiento D en el cubo"""
        # Rotar Down sobre su propio eje a la Izquierda
        sub_down = self.cube[5]
        rotated_down = np.rot90(sub_down, k=-1)
        self.cube[5] = rotated_down
        # Rotar a la izquierda las ultimas filas de las primras cuatro caras
        cero = self.cube[0, 2].copy()
        one = self.cube[1, 2].copy()
        two = self.cube[2, 2].copy()
        three = self.cube[3, 2].copy()
        self.cube[3, 2] = cero
        self.cube[2, 2] = three
        self.cube[1, 2] = two
        self.cube[0, 2] = one

    def d_prima(self):
        """Implementación del movimiento D' en el cubo"""
        sub_down = self.cube[5]
        rotated_down = np.rot90(sub_down, k=1)
        self.cube[5] = rotated_down
        # Rotar a la derecha las últimas filas de las primeras cuatro caras
        cero = self.cube[0, 2].copy()
        one = self.cube[1, 2].copy()
        two = self.cube[2, 2].copy()
        three = self.cube[3, 2].copy()
        self.cube[1, 2] = cero
        self.cube[2, 2] = one
        self.cube[3, 2] = two
        self.cube[0, 2] = three

    def f(self):
        """Implementación del movimiento F en el cubo"""
        sub_front = self.cube[0]
        rotated_front = np.rot90(sub_front, k=-1)
        self.cube[0] = rotated_front
        one = self.cube[1, :, 0].copy()
        four = self.cube[4, 2].copy()
        five = self.cube[5, 2].copy()
        three = self.cube[3, :, 2].copy()
        self.cube[1, :, 0] = four
        self.cube[5, 2] = one
        five = np.flip(five)
        self.cube[3, :, 2] = five
        three = np.flip(three)
        self.cube[4, 2] = three

    def f_prima(self):
        """Implementación del movimiento F' en el cubo"""
        sub_front = self.cube[0]
        rotated_front = np.rot90(sub_front, k=1)
        self.cube[0] = rotated_front
        one = self.cube[1, :, 0].copy()
        four = self.cube[4, 2].copy()
        five = self.cube[5, 2].copy()
        three = self.cube[3, :, 2].copy()
        self.cube[4, 2] = one
        four = np.flip(four)
        self.cube[3, :, 2] = four
        three = np.flip(three)
        self.cube[5, 2] = three
        self.cube[1, :, 0] = five

    def b(self):
        """Implementación del movimiento B en el cubo"""
        sub_back = self.cube[2]
        rotated_back = np.rot90(sub_back, k=-1)
        self.cube[2] = rotated_back
        four = self.cube[4, 0].copy()
        one = self.cube[1, :, 2].copy()
        three = self.cube[3, :, 0].copy()
        five = self.cube[5, 0].copy()
        four = np.flip(four)
        self.cube[3, :, 0] = four
        self.cube[4, 0] = one
        self.cube[1, :, 2] = five
        three = np.flip(three)
        self.cube[5, 0] = three

    def b_prima(self):
        """Implementación del movimiento B' en el cubo"""
        sub_back = self.cube[2]
        rotated_back = np.rot90(sub_back, k=1)
        self.cube[2] = rotated_back
        four = self.cube[4, 0].copy()
        one = self.cube[1, :, 2].copy()
        three = self.cube[3, :, 0].copy()
        five = self.cube[5, 0].copy()
        self.cube[1, :, 2] = four
        self.cube[5, 0] = one
        five = np.flip(five)
        self.cube[3, :, 0] = five
        three = np.flip(three)
        self.cube[4, 0] = three

    def r(self):
        """Implementación del movimiento R en el cubo"""
        index_column = 2
        cero = self.cube[0, :, index_column].copy()
        four = self.cube[4, :, index_column].copy()
        two = self.cube[2, :, 0].copy()
        five = self.cube[5, :, 0].copy()
        five = np.flip(five)
        four = np.flip(four)
        self.cube[0, :, index_column] = five
        self.cube[4, :, index_column] = cero
        self.cube[2, :, 0] = four
        self.cube[5, :, 0] = two
        sub_right = self.cube[1]
        rotated_right = np.rot90(sub_right, k=-1)
        self.cube[1] = rotated_right

    def r_prima(self):
        """Implementación del movimiento R' en el cubo"""
        sub_right = self.cube[1]
        rotated_right = np.rot90(sub_right, k=1)
        self.cube[1] = rotated_right
        index_column = 2
        cero = self.cube[0, :, index_column].copy()
        four = self.cube[4, :, index_column].copy()
        two = self.cube[2, :, 0].copy()
        five = self.cube[5, :, 0].copy()
        two = np.flip(two)
        cero = np.flip(cero)
        self.cube[0, :, index_column] = four
        self.cube[4, :, index_column] = two
        self.cube[2, :, 0] = five
        self.cube[5, :, 0] = cero

    def l(self):
        """Implementación del movimiento L en el cubo"""
        sub_left = self.cube[3]
        rotated_left = np.rot90(sub_left, k=-1)
        self.cube[3] = rotated_left
        index_column = 0
        cero = self.cube[0, :, index_column].copy()
        four = self.cube[4, :, index_column].copy()
        two = self.cube[2, :, 2].copy()
        five = self.cube[5, :, 2].copy()
        five = np.flip(five)
        four = np.flip(four)
        self.cube[0, :, index_column] = five
        self.cube[4, :, index_column] = cero
        self.cube[2, :, 2] = four
        self.cube[5, :, 2] = two

    def l_prima(self):
        """Implementación del movimiento L' en el cubo"""
        sub_left = self.cube[3]
        rotated_left = np.rot90(sub_left, k=1)
        self.cube[3] = rotated_left
        index_column = 0
        cero = self.cube[0, :, index_column]
        four = self.cube[4, :, index_column]
        two = self.cube[2, :, index_column]
        five = self.cube[5, :, index_column]
        self.cube[0, :, index_column] = four
        self.cube[4, :, index_column] = two
        self.cube[2, :, index_column] = five
        self.cube[5, :, index_column] = cero

    def print_cube(self):
        """Esta función solo imprime el cubo"""
        print(self.cube)

    def return_cube(self):
        """Devuelve el cubo"""
        return self.cube

    def ravel(self):
        return self.cube.ravel()
    
    def copy_cube(self):
        cubo_nuevo = RubikCube()
        cubo_nuevo = cubo_nuevo.create_cube_with_given_list(np.copy(self.cube))
        return Movements(cubo_nuevo)


class RubikSolver:
    def _init_(self, cube):
        self.cube = cube

    def random_suffle(self, num_moves):
        """Esta función debe permitir revolver el cubo con una serie de movimientos al azar"""
        movements = [self.cube.u, self.cube.u_prima, self.cube.d, self.cube.d_prima, self.cube.f, self.cube.f_prima, self.cube.b, self.cube.b_prima, self.cube.r, self.cube.r_prima, self.cube.l, self.cube.l_prima]
        #num_moves = random.randint(10, 30)
        for _ in range(num_moves):
            move = random.choice(movements)
            move()


    def lista_suffle(self):
        """Esta función debe revolver el cubo según el array que le sesa dado"""
        self.cube = self.create_cube_with_given_list(lista)
        pass

    def get_neighbors(self, cube):

        movements = [
            cube.copy_cube(),
            cube.copy_cube(),
            cube.copy_cube(),
            cube.copy_cube(),
            cube.copy_cube(),
            cube.copy_cube(),
            cube.copy_cube(),
            cube.copy_cube(),
            cube.copy_cube(),
            cube.copy_cube(),
            cube.copy_cube(),
            cube.copy_cube(),
        ]

        movements[0].u()
        movements[1].d()
        movements[2].f()
        movements[3].b()
        movements[4].r()
        movements[5].l()
        movements[6].u_prima()
        movements[7].d_prima()
        movements[8].f_prima()
        movements[9].b_prima()
        movements[10].r_prima()
        movements[11].l_prima()

        return movements
    
    def compare(self, cube1, cube2):
        return np.array_equal(cube1.cube, cube2.cube)

    def Best_First_Search(self, goal, heuristic):
        """Esta función debe de resolver el cubo de rubik ccon el algoritmo de Best First Search"""
        frontier = PriorityQueue()
        frontier.put((0, self.cube))
        explored = set()

        while not frontier.empty():
            cost, current_cube = frontier.get()

            if current_cube == goal:
                return current_cube

            explored.add(current_cube)

            for next_cube in self.get_neighbors(current_cube):
                if next_cube not in explored:
                    priority = heuristic(next_cube)
                    frontier.put((priority, next_cube))

    def Breadth_First_Search(self, goal):
        """Esta función debe de resolver el cubo de rubik con el algoritmo de Breadth First Search"""
        frontier = [self.cube]
        explored = [self.cube]

        while frontier:
            current_cube = frontier.pop(0)

            if self.compare(current_cube, goal):
                return current_cube

            for next_cube in self.get_neighbors(current_cube):
                if next_cube not in explored and next_cube not in frontier:
                    explored.append(next_cube)
                    frontier.append(next_cube)

    def A_Star(self, goal, heuristic):
        """Esta función debe resolver el cubo de rubik con el algoritmo de A Estrella"""
        frontier = PriorityQueue()
        frontier.put((0, self.cube))
        cost_so_far = {self.cube: 0}
        explored = set()

        while not frontier.empty():
            _, current_cube = frontier.get()

            if current_cube == goal:
                return current_cube

            explored.add(current_cube)

            for next_cube in self.get_neighbors(current_cube):
                new_cost = cost_so_far[current_cube] + 1
                if next_cube not in cost_so_far or new_cost < cost_so_far[next_cube]:
                    cost_so_far[next_cube] = new_cost
                    priority = new_cost + heuristic(next_cube)
                    frontier.put((priority, next_cube))

    def simulated_annealing(self, goal, heuristic):
        import math
        current_cube = self.cube
        current_cost = heuristic(current_cube, goal)
        temperature = 1.0
        cooling_rate = 0.99
        while temperature > 0.01:
            neighbor_cube = self.get_random_neighbor(current_cube)
            neighbor_cost = heuristic(neighbor_cube, goal)
            cost_diff = neighbor_cost - current_cost

            if cost_diff < 0 or math.exp(-cost_diff / temperature) > random.random():
                current_cube = neighbor_cube
                current_cost = neighbor_cost

            temperature *= cooling_rate

            if current_cost == 0:
                return current_cube

        return current_cube
        
def manhattan_distance(cube, goal):
    distance = 0
    cube_flat = cube.ravel()
    goal_flat = goal.ravel()
    for i in range(len(cube_flat)):
        if cube_flat[i] != goal_flat[i]:
            distance += 1
    return distance

def hamming_distance(cube, goal):
    edge_corner_indices = [0, 2, 6, 8, 9, 11, 15, 17, 18, 20, 24, 26, 27, 29, 33, 35, 36, 38, 42, 44, 45, 47, 51, 53]
    cube_flat = cube.ravel()
    goal_flat = goal.ravel()
    distance = 0
    for i in edge_corner_indices:
        if cube_flat[i] != goal_flat[i]:
            distance += 1
    return distance

def pieces_out_of_place(cube, goal):
    mismatch_count = np.sum(cube != goal)
    return mismatch_count



# Ejemplo de uso--------------------------
#cube = RubikCube().create_cube()
#goal = RubikCube().create_cube()
#solver = RubikSolver(cube)
#solver.random_suffle()  # Revuelve el cubo aleatoriamente
#print("Cubo inicial:")
#solver.print_cube()

# Resolver con A*
#solution = solver.A_Star(goal, manhattan_distance)
#print("\nSolución:")
#print(solution)


"""Bienvenido a la sección de Testeo del código """
# help(RubikCube)
# help(Movements)
cubo = RubikCube()
cubo_resuleto = RubikCube()
lista = []
for i in range(54):
    lista.append(i)
cubo_resuleto = Movements(cubo_resuleto.create_cube_with_given_list(lista))
cubo = Movements(cubo.create_cube_with_given_list(lista))

print("Cubo revuelto")
solver = RubikSolver(cubo)
solver.random_suffle(3)
solver.cube.print_cube()
resultado = solver.Breadth_First_Search(cubo_resuleto)
print("Cubo resuelto")
resultado.print_cube()

exit()

lista = []
for i in range(54):
    lista.append(i)
cubo = cubo.create_cube_with_given_list(lista)
movimientos = Movements(cubo)
movimientos.print_cube()
print("------------------------------")
# movimientos.u()
# movimientos.print_cube()
# print("------------------------------")
# movimientos.u_prima()
# movimientos.print_cube()
"""Definitivamente U y U' funcionan al 100%"""
# movimientos.d()
# movimientos.print_cube()
# print("------------------------------")
# movimientos.d_prima()
# movimientos.print_cube()
"""Definitivamente D y D' funcionan al 100 %"""
# movimientos.r()
# movimientos.print_cube()
# print("--------------------------")
# movimientos.r()
# movimientos.r()
# movimientos.r()
# movimientos.print_cube()
"""Definitivamente R funciona  al 100%"""
# movimientos.r_prima()
# movimientos.print_cube()
# print("--------------------------")
# movimientos.r_prima()
# movimientos.r_prima()
# movimientos.r_prima()
# movimientos.print_cube()
"""Definitivamente R' funciona al 100%"""
# movimientos.l()
# movimientos.print_cube()
# print("--------------------------")
# movimientos.l()
# movimientos.l()
# movimientos.l()
# movimientos.print_cube()
"""Definitivamente L funciona al 100%"""
# movimientos.l_prima()
# movimientos.print_cube()
# print("--------------------------")
# movimientos.l_prima()
# movimientos.l_prima()
# movimientos.l_prima()
# movimientos.print_cube()
"""Definitivamente L' funciona al 100%"""
# movimientos.f()
# movimientos.print_cube()
# print("--------------------------")
# movimientos.f()
# movimientos.f()
# movimientos.f()
# movimientos.print_cube()
"""Definitivamente F funciona al 100% """
# movimientos.f_prima()
# movimientos.print_cube()
# print("--------------------------")
# movimientos.f_prima()
# movimientos.f_prima()
# movimientos.f_prima()
# movimientos.print_cube()
"""Definitivamente F' funciona al 100%"""
# movimientos.b()
# movimientos.print_cube()
# print("--------------------------")
# movimientos.b()
# movimientos.b()
# movimientos.b()
# movimientos.print_cube()
"""Definitivamente B funciona al 100%"""
# movimientos.b_prima()
# movimientos.print_cube()
# print("--------------------------")
# movimientos.b_prima()
# movimientos.b_prima()
# movimientos.b_prima()
# movimientos.print_cube()
"""Definitivamnte B' funciona al 100%"""
"""Ahora probaré la funcionalidad general del cubo """
"""Final Test Case"""
movimientos.r()
movimientos.r_prima()
print("r-------------------------------")
movimientos.print_cube()
# movimientos.l()
# movimientos.l_prima()
# print("l-------------------------------")
# movimientos.print_cube()
movimientos.u()
movimientos.u_prima()
print("u-------------------------------")
movimientos.print_cube()
movimientos.d()
movimientos.d_prima()
print("d-------------------------------")
movimientos.print_cube()
movimientos.f()
movimientos.f_prima()
print("f-------------------------------")
movimientos.print_cube()
movimientos.b()
movimientos.b_prima()
print("b-------------------------------")
movimientos.print_cube()

ravel = movimientos.ravel()
print(ravel)
"""Test Case 1"""
# movimientos.r()
# movimientos.r_prima()
# ravel = movimientos.ravel()
# print(ravel)
"""Test Case 2"""
# movimientos.r()
# movimientos.r_prima()
# ravel = movimientos.ravel()
# print(ravel)
"""Test Case 3"""
# movimientos.f()
# movimientos.f_prima()
# ravel = movimientos.ravel()
# print(ravel)
"""Test Case 4"""
# movimientos.d()
# movimientos.d_prima()
# ravel = movimientos.ravel()
# print(ravel)
"""Test Case 5"""
# movimientos.u()
# movimientos.u_prima()
# ravel = movimientos.ravel()
# print(ravel)
"""Test Case 6"""
# movimientos.b()
# movimientos.b_prima()
# ravel = movimientos.ravel()
# print(ravel)
"""Según Los casos pruebas hay un error en L y/o L' """
